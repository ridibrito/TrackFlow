import { createMiddlewareClient } from '@supabase/auth-helpers-nextjs';
import { NextResponse } from 'next/server';
import type { NextRequest } from 'next/server';

export async function middleware(req: NextRequest) {
  const res = NextResponse.next();
  const supabase = createMiddlewareClient({ req, res });

  const { data: { session } } = await supabase.auth.getSession();

  const isAuthRoute = req.nextUrl.pathname.startsWith('/login') || req.nextUrl.pathname.startsWith('/signup');
  const isDashboardRoute = req.nextUrl.pathname.startsWith('/painel') || 
                           req.nextUrl.pathname.startsWith('/projects') ||
                           req.nextUrl.pathname.startsWith('/settings') ||
                           req.nextUrl.pathname.startsWith('/team') ||
                           req.nextUrl.pathname.startsWith('/assistente-ia') ||
                           req.nextUrl.pathname.startsWith('/auto-create');

  // Se o usuário não estiver logado e tentar acessar uma rota do dashboard
  if (!session && isDashboardRoute) {
    return NextResponse.redirect(new URL('/login', req.url));
  }

  // Se o usuário estiver logado e tentar acessar uma rota de autenticação
  if (session && isAuthRoute) {
    return NextResponse.redirect(new URL('/painel', req.url));
  }

  return res;
}

export const config = {
  matcher: [
    /*
     * Match all request paths except for the ones starting with:
     * - _next/static (static files)
     * - _next/image (image optimization files)
     * - favicon.ico (favicon file)
     * Feel free to modify this pattern to include more paths.
     */
    '/((?!_next/static|_next/image|favicon.ico|.*\\..*).*)',
  ],
}; 